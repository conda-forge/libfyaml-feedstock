--- libfyaml-0.9.ori/src/internal/fy-thread.c	2023-09-26 07:27:12.861509893 +0200
+++ libfyaml-0.9.new/src/internal/fy-thread.c	2023-09-26 09:05:54.293896036 +0200
@@ -183,108 +183,6 @@
 	return (long long)((int64_t)(after.tv_sec - before.tv_sec) * (int64_t)1000000000UL + (int64_t)(after.tv_nsec - before.tv_nsec));
 }
 
-static void test_latency_worker_thread_fn(void *arg)
-{
-	struct thread_latency_state *s = arg;
-
-	clock_gettime(CLOCK_MONOTONIC, &s->execute);
-}
-
-void test_thread_latency(unsigned int num_threads)
-{
-	struct fy_thread_pool_cfg tp_cfg;
-	struct fy_thread_pool *tp;
-	struct fy_thread **threads, *t;
-	struct fy_thread_work *works;
-	long scval;
-	unsigned int i, count, num_cpus;
-	int rc;
-	struct thread_latency_state *states, *s;
-
-	(void)rc;
-
-	if (num_threads == 0) {
-		scval = sysconf(_SC_NPROCESSORS_ONLN);
-		assert(scval > 0);
-		num_cpus = (unsigned int)scval;
-	} else
-		num_cpus = num_threads;
-
-	memset(&tp_cfg, 0, sizeof(tp_cfg));
-	tp_cfg.flags = 0;
-	tp_cfg.num_threads = num_cpus;
-	tp_cfg.userdata = NULL;
-
-	tp = fy_thread_pool_create(&tp_cfg);
-	assert(tp);
-
-
-	count = tp->num_threads;
-	threads = alloca(count * sizeof(*threads));
-	works = alloca(count * sizeof(*works));
-	states = alloca(count * sizeof(*states));
-
-	memset(states, 0, count * sizeof(*states));
-
-	for (i = 0; i < count; i++) {
-		s = &states[i];
-
-		clock_gettime(CLOCK_MONOTONIC, &s->reserve);
-
-		threads[i] = fy_thread_reserve(tp);
-		assert(threads[i]);
-		t = threads[i];
-		assert(t->id == i);
-
-		clock_gettime(CLOCK_MONOTONIC, &s->reserve_done);
-
-	}
-
-	for (i = 0; i < count; i++) {
-		s = &states[i];
-		clock_gettime(CLOCK_MONOTONIC, &s->submit);
-
-		t = threads[i];
-		works[i].fn = test_latency_worker_thread_fn;
-		works[i].arg = s;
-		fy_thread_submit_work(t, &works[i]);
-	}
-
-	for (i = 0; i < count; i++) {
-		s = &states[i];
-		clock_gettime(CLOCK_MONOTONIC, &s->wait);
-
-		t = threads[i];
-		fy_thread_wait_work(t);
-
-		clock_gettime(CLOCK_MONOTONIC, &s->wait_done);
-	}
-
-	for (i = 0; i < count; i++) {
-
-		s = &states[i];
-		clock_gettime(CLOCK_MONOTONIC, &s->unreserve);
-
-		t = threads[i];
-		fy_thread_unreserve(t);
-
-		clock_gettime(CLOCK_MONOTONIC, &s->unreserve_done);
-	}
-
-	fy_thread_pool_destroy(tp);
-
-	fprintf(stderr, "latency results\n");
-	for (i = 0; i < count; i++) {
-		s = &states[i];
-
-		fprintf(stderr, "#%2u: reserve:%10lld submit-execute:%10lld execute-waitdone:%10lld wait:%10lld unreserve:%10lld\n", i,
-				delta_ns(s->reserve, s->reserve_done),
-				delta_ns(s->submit, s->execute),
-				delta_ns(s->execute, s->wait_done),
-				delta_ns(s->wait, s->wait_done),
-				delta_ns(s->unreserve, s->unreserve_done));
-	}
-}
 
 // #define STEAL_LOOP_COUNT 100000000
 #define STEAL_LOOP_COUNT 10000
@@ -410,116 +308,6 @@
 	s->sum = sum;
 }
 
-void test_thread_join_sum(unsigned int num_threads, unsigned int count, bool steal_mode, unsigned int times)
-{
-	struct fy_thread_pool_cfg tp_cfg;
-	struct fy_thread_pool *tp;
-	struct timespec before, after;
-	unsigned int i, num_cpus;
-	long scval;
-	uint8_t *values;
-	int rc;
-	uint64_t sum_single, sum_multi;
-	struct sum_args args[2];
-	long long table_multi[times];
-	long long ns;
-
-	(void)rc;
-
-	fprintf(stderr, "**********************************************************************\n");
-	fprintf(stderr, "%s: steal_mode=%s\n", __func__, steal_mode ? "true" : "false");
-
-	values = malloc(count * sizeof(*values));
-	assert(values);
-
-	clock_gettime(CLOCK_MONOTONIC, &before);
-	for (i = 0; i < count; i++)
-		values[i] = (uint8_t)rand();
-
-	clock_gettime(CLOCK_MONOTONIC, &after);
-	fprintf(stderr, "%s: seeding done in %lldus\n", __func__, delta_ns(before, after) / 1000);
-
-	clock_gettime(CLOCK_MONOTONIC, &before);
-	sum_single = calc_sum(values, count);
-	clock_gettime(CLOCK_MONOTONIC, &after);
-	ns = delta_ns(before, after);
-	fprintf(stderr, "%s: calculated sum=%"PRIu64" (single threaded) done in %lldus\n", __func__, sum_single,  ns / 1000);
-
-	if (num_threads == 0) {
-		scval = sysconf(_SC_NPROCESSORS_ONLN);
-		assert(scval > 0);
-		num_cpus = (unsigned int)scval;
-	} else
-		num_cpus = num_threads;
-
-	memset(&tp_cfg, 0, sizeof(tp_cfg));
-	tp_cfg.flags = steal_mode ? FYTPCF_STEAL_MODE : 0;
-	tp_cfg.num_threads = num_cpus;
-	tp_cfg.userdata = NULL;
-
-	tp = fy_thread_pool_create(&tp_cfg);
-	assert(tp);
-
-	fprintf(stderr, "%s: calculating (multi threaded) -", __func__);
-	for (i = 0; i < times; i++) {
-		clock_gettime(CLOCK_MONOTONIC, &before);
-
-		memset(args, 0, sizeof(args));
-		args[0].tp = args[1].tp = tp;
-		args[0].values_start = args[1].values_start = values;
-		args[0].count_start = args[1].count_start = count;
-		args[0].sum = args[1].sum = 0;
-
-		args[0].values = values;
-		args[0].count = count / 2;
-		args[1].values = values + args[0].count;
-		args[1].count = count - args[0].count;
-
-		// fprintf(stderr, "M<%06x-%06x,%06x-%06x>\n",
-		//		0,
-		//		args[0].count - 1,
-		//		args[0].count,
-		//		args[0].count + args[1].count - 1);
-
-		fy_thread_arg_array_join(tp, test_worker_thread_sum_fn, NULL, &args, sizeof(args[0]), sizeof(args)/sizeof(args[0]));
-
-		sum_multi = args[0].sum + args[1].sum;
-		if (sum_multi != sum_single) {
-			fprintf(stderr, "\nFailed sum_multi %"PRIu64" should be %"PRIu64"\n", sum_multi, sum_single);
-			abort();
-		}
-
-		clock_gettime(CLOCK_MONOTONIC, &after);
-		ns = delta_ns(before, after);
-		fprintf(stderr, " %lldus", ns / 1000);
-		fflush(stderr);
-		table_multi[i] = ns;
-	}
-	ns = 0;
-	for (i = 0; i < times; i++)
-		ns += table_multi[i];
-	ns /= times;
-	fprintf(stderr, " : average %lldus\n", ns / 1000);
-
-	fy_thread_pool_destroy(tp);
-
-	free(values);
-}
-
-int thread_test(unsigned int num_threads)
-{
-#if 0
-	test_worker_threads(num_threads);
-	test_thread_join(num_threads);
-	test_thread_latency(num_threads);
-	test_thread_join_steal(num_threads);
-#endif
-	test_thread_join_sum(num_threads, 1 << 20, false, 10);	/* 1M of values */
-	test_thread_join_sum(num_threads, 1 << 20, true, 10);	/* 1M of values */
-
-	return 0;
-}
-
 #define OPT_NUM_THREADS		128
 
 static struct option lopts[] = {
@@ -567,11 +355,6 @@
 		}
 	}
 
-	rc = thread_test(num_threads);
-	if (rc) {
-		fprintf(stderr, "Error: thread_test() failed\n");
-		goto err_out;
-	}
 
 ok_out:
 	exitcode = EXIT_SUCCESS;
